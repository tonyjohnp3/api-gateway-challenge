AWSTemplateFormatVersion: 2010-09-09

Description: Tech Challenge #1 - 20190715



Parameters:
  MyName:
    Type: String
    Description: Name of the Candidate
    Default: Challenge_team
  InsertItemFunctionName:
    Type: String
    Description: Name of lambda for insert item
    Default: tech-test-insertItem
  PushToSnsFunctionName:
    Type: String
    Description: Name of lambda to push insert event to SNS
    Default: tech-test-pushInsertEventToSns
  PushEmail:
    Type: String
    Description: Email to subscribe for push notification
  ApiStageName:
    Type: String
    Description: Stage name of the API Deployment
    Default: v1

Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MyName
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref InsertItemFunctionName
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def dynamo_itemcreate(team_name, team_country, team_desc, team_rating):
              dynamodb = boto3.client('dynamodb')
              db_name = os.environ['dbName']
              dynamodb.put_item(TableName=db_name, Item={'country':{'S':team_country}, 'team':{'S':team_name}, 'desc':{'S':team_desc}, 'rating':{'S':team_rating}})

          def lambda_handler(event, context):
              print('Team Country: %s' % event['team_country'])
              print('Team Name: %s' % event['team_name'])
              print('Team Description: %s' % event['team_desc'])
              print('Team Rating: %s' % event['team_rating'])
              dynamo_itemcreate(event['team_name'], event['team_country'], event['team_desc'],event['team_rating'])
      Description: API Gateway TechChallenge
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5
      Environment:
        Variables:
          dbName: !Ref DynamoTable

  MySnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref PushEmail
        Protocol: email

  PushToSnsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PushToSnsFunctionName
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
            sns = boto3.client('sns')
            for record in event['Records']:
              print('Record: %s' % json.dumps(record))
              sns.publish(
                TopicArn=os.environ['snsTopicArn'],
                Message=json.dumps(record)
              )
            print('Successfully processed %s records.' % str(len(event['Records'])))
      Description: Lambda function to process DynamoDB streams
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt PushToSnsFunctionExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5
      Environment:
        Variables:
          snsTopicArn: !Ref MySnsTopic

  PushToSnsFunctionEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref PushToSnsFunction
      EventSourceArn: !GetAtt DynamoTable.StreamArn
      BatchSize: 1
      StartingPosition: LATEST

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${InsertItemFunctionName}:*'
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyName}

  PushToSnsFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PushToSnsFunctionName}'  
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${PushToSnsFunctionName}:*'
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: '*'
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyName}/stream/*'


  APIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - LambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: ApiRestApi
            - /*


  ApiRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub RestTechChallenge1_${MyName}
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types: 
          - REGIONAL

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiRestApi
        - RootResourceId
      RestApiId: !Ref ApiRestApi
      PathPart: 'add_new'

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiRestApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{}'
            ResponseParameters:
              method.response.header.Location: integration.response.body.headers.uid
            StatusCode: 201
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "team_name": $input.json(''team_name''), "team_country": $input.json(''team_country''), "team_desc": $input.json(''team_desc''), "team_rating": $input.json(''team_rating'')}'
      RequestModels:
        application/json: !Ref ApiModel
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Location: true
          StatusCode: 201

  ApiModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Team
      RestApiId: !Ref ApiRestApi
      Schema:
        title: Team
        type: object
        properties: 
          team_country:
            type: string
          team_name:
            type: string
          team_desc:
            type: string
          team_rating: 
            type: string

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiRestApi
      StageName: !Ref ApiStageName
    DependsOn:
      - ApiMethod
      - ApiModel
      - ApiRestApi
      - APIPermission

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref ApiRestApi
        Stage: !Ref ApiStageName
    DependsOn:
      - ApiDeployment

  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
  ApiKey:
    Description: API key for Request
    Value: !Ref ApiKey